# client_handler.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –•–ê–ë –° NPS –ò –†–ï–§–ï–†–ê–õ–ê–ú–ò)

import telebot
from telebot import types
import os
import sys
import re # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import asyncio
import json
import datetime
import io
from dotenv import load_dotenv
from logger_config import get_bot_logger, log_exception

load_dotenv()

sys.path.append(os.path.dirname(__file__))
from supabase_manager import SupabaseManager
from ai_helper import get_ai_support_answer

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_bot_logger('client_bot')

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
CLIENT_TOKEN = os.environ.get('TOKEN_CLIENT')
if not CLIENT_TOKEN:
    logger.critical("TOKEN_CLIENT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    raise ValueError("FATAL: TOKEN_CLIENT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
client_bot = telebot.TeleBot(CLIENT_TOKEN)

try:
    sm = SupabaseManager()
    logger.info("SupabaseManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    log_exception(logger, e, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SupabaseManager")
    raise

BASE_DOMAIN = "https://loyalitybot.vercel.app"

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
# –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: /start partner_<ID>
REFERRAL_PATTERN = re.compile(r'partner_(\d+)', re.IGNORECASE)

# --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï –î–õ–Ø NPS ---
# –ö–ª—é—á: chat_id –∫–ª–∏–µ–Ω—Ç–∞ (str), –ó–Ω–∞—á–µ–Ω–∏–µ: chat_id –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (str)
LAST_TRANSACTION_PARTNER = {}


# ------------------------------------
# –õ–û–ì–ò–ö–ê NPS (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ------------------------------------

def send_nps_request(chat_id: str, partner_chat_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É NPS."""
    chat_id = str(chat_id)

    LAST_TRANSACTION_PARTNER[chat_id] = partner_chat_id

    markup = types.InlineKeyboardMarkup(row_width=6)

    row1 = [types.InlineKeyboardButton(str(i), callback_data=f"nps_rate_{i}") for i in range(6)]
    row2 = [types.InlineKeyboardButton(str(i), callback_data=f"nps_rate_{i}") for i in range(6, 11)]

    markup.add(*row1)
    markup.add(*row2)

    client_bot.send_message(
        chat_id,
        "‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!**\n\n"
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –Ω–∞—Å –¥—Ä—É–≥—É –∏–ª–∏ –∫–æ–ª–ª–µ–≥–µ?\n"
        "(0 - –∫—Ä–∞–π–Ω–µ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, 10 - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é)",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@client_bot.callback_query_handler(func=lambda call: call.data.startswith('nps_rate_'))
def callback_nps_rating(call):
    client_chat_id = str(call.message.chat.id)
    
    try:
        rating = int(call.data.split('_')[-1])
        partner_chat_id = LAST_TRANSACTION_PARTNER.pop(client_chat_id, 'SYSTEM')
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client_chat_id} –ø–æ—Å—Ç–∞–≤–∏–ª NPS –æ—Ü–µ–Ω–∫—É {rating} –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_chat_id}")

        success = sm.record_nps_rating(client_chat_id, partner_chat_id, rating, master_name='N/A')

        if success:
            client_bot.edit_message_text(
                chat_id=client_chat_id,
                message_id=call.message.message_id,
                text=f"‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: **{rating}**!\n"
                     "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
                parse_mode='Markdown'
            )
            logger.info(f"NPS –æ—Ü–µ–Ω–∫–∞ {rating} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_chat_id}")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å NPS –æ—Ü–µ–Ω–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_chat_id}")
            client_bot.edit_message_text(
                chat_id=client_chat_id,
                message_id=call.message.message_id,
                text="‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏.",
            )

        client_bot.answer_callback_query(call.id)
    
    except Exception as e:
        log_exception(logger, e, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NPS callback –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_chat_id}")
        try:
            client_bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass


# ------------------------------------
# –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö /START (–û–ë–ù–û–í–õ–ï–ù–û)
# ------------------------------------

@client_bot.message_handler(commands=['start', 'help'])
def handle_new_user_start(message):
    chat_id = str(message.chat.id)
    text = message.text
    
    logger.info(f"–ö–ª–∏–µ–Ω—Ç {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: {text}")

    # --- 1. –ü–ê–†–°–ò–ù–ì –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò ---
    partner_id = None
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞—è '/start '
    match = REFERRAL_PATTERN.search(text)
    if match:
        partner_id = match.group(1)
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω partner_id –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {partner_id}")

    try:
        client_exists = sm.client_exists(chat_id)
    except Exception as e:
        log_exception(logger, e, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {chat_id}")
        client_bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- 2. –õ–û–ì–ò–ö–ê: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û –†–ï–§–ï–†–ê–õ–£ (–ê–¢–û–ú–ê–†–ù–ê–Ø) ---
    if not client_exists and partner_id:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            result = sm.register_client_via_link(chat_id, partner_id, phone=None, name=None)

            if result and not result[1]:  # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–Ω–µ—Ç –æ—à–∏–±–∫–∏)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–Ω—É—Å–æ–º
                bonus_amount = sm.WELCOME_BONUS_AMOUNT
                logger.info(f"–ö–ª–∏–µ–Ω—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ —Å—Å—ã–ª–∫–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id}")
                client_bot.send_message(
                    chat_id,
                    f"üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
                    f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ **{bonus_amount}** –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤!",
                    parse_mode='Markdown'
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ª–æ–≥–∏–∫–µ "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç"
                client_exists = True 
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                error_msg = result[1] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {chat_id} –ø–æ —Å—Å—ã–ª–∫–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id}: {error_msg}")
                client_bot.send_message(chat_id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            log_exception(logger, e, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É")
            client_bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    # --- 3. –õ–û–ì–ò–ö–ê: –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–õ–ò–ï–ù–¢ (–≤–∫–ª—é—á–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) ---
    if client_exists:

        # --- –õ–û–ì–ò–ö–ê: –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ù–û–ì–û ID (–°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –õ–û–ì–ò–ö–ê) ---
        client_data = sm.get_client_details_for_partner(chat_id)

        # –ï—Å–ª–∏ chat_id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å VIA_PARTNER_, –∑–Ω–∞—á–∏—Ç, –∫–ª–∏–µ–Ω—Ç –≤–ø–µ—Ä–≤—ã–µ –Ω–∞–∂–∞–ª /start
        if client_data and client_data.get('chat_id', '').startswith('VIA_PARTNER_'):
            temp_id = client_data['chat_id']
            # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö. –ü–æ–∏—Å–∫ –∏–¥–µ—Ç –ø–æ temp_id.
            if sm.update_client_chat_id(old_id=temp_id, new_id=chat_id):
                print(f"CLIENT_HANDLER: –û–±–Ω–æ–≤–ª–µ–Ω chat_id –∫–ª–∏–µ–Ω—Ç–∞ —Å {temp_id} –Ω–∞ {chat_id}")

        # ---------------------------------------------

        markup = types.InlineKeyboardMarkup()
        webapp_btn = types.InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=types.WebAppInfo(url=BASE_DOMAIN)
        )
        markup.add(webapp_btn)

        client_bot.send_message(
            chat_id,
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LoyalityBot!**\n\n"
            "üí∞ –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏\n"
            "üéÅ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –Ω–∞ —É—Å–ª—É–≥–∏ –∏ —Å–∫–∏–¥–∫–∏\n"
            "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return

    # --- 4. –õ–û–ì–ò–ö–ê: –ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ô –ö–õ–ò–ï–ù–¢ (–ë–ï–ó –†–ï–§–ï–†–ê–õ–ê) ---
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    webapp_btn = types.InlineKeyboardButton(
        "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=types.WebAppInfo(url=BASE_DOMAIN)
    )
    markup.add(webapp_btn)

    client_bot.send_message(
        chat_id,
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LoyalityBot!**\n\n"
        "üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏\n"
        "‚Ä¢ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –Ω–∞ —É—Å–ª—É–≥–∏\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=markup,
        parse_mode='Markdown'
    )

# ------------------------------------
# AI –ü–û–î–î–ï–†–ñ–ö–ê
# ------------------------------------

@client_bot.message_handler(commands=['ask', '—Å–ø—Ä–æ—Å–∏—Ç—å'])
def handle_ask_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask - –∑–∞–ø—Ä–æ—Å –∫ AI –ø–æ–º–æ—â–Ω–∏–∫—É"""
    chat_id = str(message.chat.id)
    logger.info(f"–ö–ª–∏–µ–Ω—Ç {chat_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /ask")
    
    client_bot.send_message(
        chat_id,
        "ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫**\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã?\n"
        "‚Ä¢ –ì–¥–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤?\n"
        "‚Ä¢ –ö–∞–∫ –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã?\n\n"
        "–ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å —Å–∏–º–≤–æ–ª–∞ **?**",
        parse_mode='Markdown'
    )


@client_bot.message_handler(func=lambda message: message.text and message.text.startswith('?'))
def handle_ai_question(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å ?"""
    chat_id = str(message.chat.id)
    question = message.text[1:].strip()  # –£–±–∏—Ä–∞–µ–º "?" –∏–∑ –Ω–∞—á–∞–ª–∞
    
    if not question:
        client_bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ ?")
        return
    
    logger.info(f"AI –≤–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {chat_id}: {question}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–¥—É–º–∞–µ—Ç"
    thinking_msg = client_bot.send_message(chat_id, "ü§î –î—É–º–∞—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–∏)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        answer = loop.run_until_complete(get_ai_support_answer(question))
        loop.close()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
        try:
            client_bot.delete_message(chat_id, thinking_msg.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        client_bot.send_message(
            chat_id,
            f"ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫:**\n\n{answer}\n\n"
            f"_–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'_",
            parse_mode='Markdown'
        )
        
        logger.info(f"AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {chat_id}")
        
    except Exception as e:
        log_exception(logger, e, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {chat_id}")
        
        try:
            client_bot.delete_message(chat_id, thinking_msg.message_id)
        except:
            pass
        
        client_bot.send_message(
            chat_id,
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥–¥–µ—Ä–∂–∫–∞' –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
        )


@client_bot.message_handler(func=lambda message: message.text and message.text.lower() == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
def handle_support_request(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    chat_id = str(message.chat.id)
    logger.info(f"–ö–ª–∏–µ–Ω—Ç {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–¥–µ—Ä–∂–∫—É")
    
    client_bot.send_message(
        chat_id,
        "üìû **–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –∏ –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –¥–æ 1 —á–∞—Å–∞\n"
        "üìß Email: support@loyalitybot.com",
        parse_mode='Markdown'
    )


# ------------------------------------
# GDPR COMPLIANCE
# ------------------------------------

@client_bot.message_handler(commands=['export_data', '—ç–∫—Å–ø–æ—Ä—Ç_–¥–∞–Ω–Ω—ã—Ö'])
def handle_export_data(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (GDPR Right to Data Portability)"""
    chat_id = str(message.chat.id)
    logger.info(f"–ö–ª–∏–µ–Ω—Ç {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö (GDPR)")
    
    client_bot.send_message(
        chat_id,
        "üì¶ **–≠–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "–ì–æ—Ç–æ–≤–ª—é –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...\n\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        parse_mode='Markdown'
    )
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db.export_user_data(chat_id)
        
        if not user_data:
            client_bot.send_message(
                chat_id,
                "‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode='Markdown'
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        import json
        import io
        
        json_data = json.dumps(user_data, indent=2, ensure_ascii=False, default=str)
        json_file = io.BytesIO(json_data.encode('utf-8'))
        json_file.name = f'user_data_{chat_id}_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        
        client_bot.send_document(
            chat_id,
            json_file,
            caption=(
                "‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
                "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å GDPR.\n\n"
                "üìÑ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞\n"
                "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n"
                "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
                "‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ\n"
                "‚Ä¢ –£—Å–ª—É–≥–∏ –∏ –∞–∫—Ü–∏–∏ (–¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)\n\n"
                "üîí –•—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ."
            ),
            parse_mode='Markdown'
        )
        
        logger.info(f"Successfully sent data export to {chat_id}")
        
    except Exception as e:
        log_exception(logger, e, f"Error exporting data for {chat_id}")
        client_bot.send_message(
            chat_id,
            "‚ùå **–û—à–∏–±–∫–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )


@client_bot.message_handler(commands=['delete_account', '—É–¥–∞–ª–∏—Ç—å_–∞–∫–∫–∞—É–Ω—Ç'])
def handle_delete_account_request(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (GDPR Right to be Forgotten)"""
    chat_id = str(message.chat.id)
    logger.info(f"–ö–ª–∏–µ–Ω—Ç {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (GDPR)")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"gdpr_delete_confirm_{chat_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gdpr_delete_cancel")
    )
    
    client_bot.send_message(
        chat_id,
        "‚ö†Ô∏è **–£–î–ê–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n\n"
        "**–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:**\n"
        "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤\n"
        "‚ùå –í—Å–µ —É—Å–ª—É–≥–∏ –∏ –∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ –≤—ã –ø–∞—Ä—Ç–Ω–µ—Ä)\n"
        "‚ùå –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ\n"
        "‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n\n"
        "**‚ö†Ô∏è –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û!**\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        parse_mode='Markdown',
        reply_markup=markup
    )


@client_bot.callback_query_handler(func=lambda call: call.data.startswith('gdpr_delete_'))
def handle_gdpr_delete_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    chat_id = str(call.message.chat.id)
    
    if call.data == "gdpr_delete_cancel":
        client_bot.edit_message_text(
            "‚ùé **–û—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
            "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode='Markdown'
        )
        logger.info(f"Client {chat_id} cancelled account deletion")
        return
    
    if call.data.startswith("gdpr_delete_confirm_"):
        client_bot.edit_message_text(
            "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**\n\n"
            "–£–¥–∞–ª—è—é –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode='Markdown'
        )
        
        try:
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            deletion_results = db.delete_user_data(chat_id)
            
            if deletion_results.get('success'):
                client_bot.edit_message_text(
                    "‚úÖ **–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã**\n\n"
                    "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å GDPR.\n\n"
                    "**–£–¥–∞–ª–µ–Ω–æ:**\n"
                    f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞: {deletion_results['tables_deleted'].get('clients', 'N/A')}\n"
                    f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {deletion_results['tables_deleted'].get('partners', 'N/A')}\n"
                    f"‚Ä¢ –£—Å–ª—É–≥–∏: {deletion_results['tables_deleted'].get('services', 'N/A')}\n"
                    f"‚Ä¢ –ê–∫—Ü–∏–∏: {deletion_results['tables_deleted'].get('promotions', 'N/A')}\n"
                    f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {deletion_results['tables_deleted'].get('transactions', 'N/A')}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.\n\n"
                    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å LoyaltyBot! üëã",
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown'
                )
                logger.info(f"Successfully deleted account for {chat_id}")
            else:
                client_bot.edit_message_text(
                    "‚ö†Ô∏è **–ß–∞—Å—Ç–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ**\n\n"
                    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏:\n\n"
                    f"{json.dumps(deletion_results['tables_deleted'], indent=2, ensure_ascii=False)}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown'
                )
                logger.warning(f"Partial deletion for {chat_id}: {deletion_results}")
                
        except Exception as e:
            log_exception(logger, e, f"Error deleting account for {chat_id}")
            client_bot.edit_message_text(
                "‚ùå **–û—à–∏–±–∫–∞**\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                chat_id=chat_id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )


@client_bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–µ—Ä—é —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–ø—Ä–∞–≤–ª—è—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ /start
    client_bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.\n\n"
                             "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å **?**",
                             parse_mode='Markdown')

if __name__ == '__main__':
    logger.info("=== –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    while True:
        try:
            client_bot.polling(none_stop=True, interval=1, timeout=20)
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt)")
            break
        except Exception as e:
            log_exception(logger, e, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API")
            logger.warning("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(5)