import os
import asyncio
from dotenv import load_dotenv
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import logging

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ SupabaseManager –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, supabase_manager.py)
from supabase_manager import SupabaseManager 

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/admin_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('admin_bot')

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID") # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
BOT_TOKEN = os.environ.get("ADMIN_BOT_TOKEN") # –¢–æ–∫–µ–Ω –¥–ª—è –ê–¥–º–∏–Ω-–±–æ—Ç–∞
TOKEN_PARTNER = os.environ.get("TOKEN_PARTNER") # –¢–æ–∫–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)

if not BOT_TOKEN or not ADMIN_CHAT_ID:
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID")
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID.")

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

try:
    db_manager = SupabaseManager()
    logger.info("SupabaseManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SupabaseManager: {e}")
    raise
# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
_notified_pending_partner_ids: set[str] = set()
# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã—Ö —É—Å–ª—É–≥
_notified_pending_service_ids: set[int] = set()

# --- FSM States –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π ---
class NewsCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_preview = State()
    waiting_for_image = State()

class NewsEditing(StatesGroup):
    selecting_news = State()
    selecting_field = State()
    waiting_for_new_value = State()

# –•–µ–ª–ø–µ—Ä: —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def _get_admin_ids() -> list[int]:
    return [int(i.strip()) for i in str(ADMIN_CHAT_ID).split(',') if i.strip()]
# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º —á–µ—Ä–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞ ---
def send_partner_notification(partner_chat_id: str, text: str) -> None:
    if not TOKEN_PARTNER:
        return
    try:
        url = f"https://api.telegram.org/bot{TOKEN_PARTNER}/sendMessage"
        payload = {"chat_id": str(partner_chat_id), "text": text, "parse_mode": "Markdown"}
        requests.post(url, data=payload, timeout=5)
    except Exception:
        # –Ω–µ –ø–∞–¥–∞–µ–º –≤ –∞–¥–º–∏–Ω–∫–µ –∏–∑-–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        pass


# --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def is_admin(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ ID, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    admin_ids = [int(i.strip()) for i in str(ADMIN_CHAT_ID).split(',')]
    return chat_id in admin_ids


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(Command("start"))
@dp.message(Command("admin"))
async def handle_start_admin(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    if not is_admin(message.chat.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –ó–∞—è–≤–∫–∏ –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤", callback_data="admin_partners")],
        [InlineKeyboardButton(text="‚ú® –ú–æ–¥–µ—Ä–∞—Ü–∏—è –£—Å–ª—É–≥", callback_data="admin_services")],
        [InlineKeyboardButton(text="üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–æ–≤–æ—Å—Ç—è–º–∏", callback_data="admin_news")],
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await message.answer(
        "üëã **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:",
        reply_markup=keyboard
    )


# --- Callback-–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.callback_query(F.data == "admin_partners")
async def show_pending_partners(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ 'Pending'."""
    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...")
    
    partners_df = db_manager.get_all_partners()
    pending_partners = partners_df[partners_df['status'].str.lower() == 'pending']
    
    if pending_partners.empty:
        await callback_query.message.edit_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –Ω–µ—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
    for index, partner in pending_partners.iterrows():
        partner_chat_id = partner['chat_id']
        message_text = (
            f"**–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ (ID: {partner_chat_id})**\n"
            f"üë§ –ò–º—è: {partner['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {partner['phone']}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {partner['company_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {partner['created_at'][:10]}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üü¢ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"partner_approve_{partner_chat_id}"),
                InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"partner_reject_{partner_chat_id}")
            ]
        ])
        
        await bot.send_message(
            chat_id=callback_query.message.chat.id, 
            text=message_text, 
            reply_markup=keyboard
        )

    await callback_query.message.edit_text(
        f"‚è≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pending_partners)} –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
    )


@dp.callback_query(F.data.startswith("partner_"))
async def handle_partner_approval(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞."""
    action, partner_id = callback_query.data.split('_')[1], callback_query.data.split('_')[2]
    
    new_status = 'Approved' if action == 'approve' else 'Rejected'
    success = db_manager.update_partner_status(partner_id, new_status)
    
    if success:
        result_text = "üü¢ –û–¥–æ–±—Ä–µ–Ω–∞" if new_status == 'Approved' else "üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        if callback_query.message.text:
             processed_text = callback_query.message.text.split('\n')[0]
             await callback_query.message.edit_text(f"{processed_text}\n\n**–°–¢–ê–¢–£–°: {result_text}**")
        else:
            await callback_query.message.edit_text(f"–ó–∞—è–≤–∫–∞ ID {partner_id}: {result_text}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–Ω–µ—Ä–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ—Ç
        if new_status == 'Approved':
            send_partner_notification(partner_id, "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–º –±–æ—Ç–µ.")
        else:
            send_partner_notification(partner_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ü–∞—Ä—Ç–Ω–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î.")
        
    await callback_query.answer()


# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ ---
async def _notify_admins_about_partner(partner_row) -> None:
    partner_chat_id = partner_row['chat_id']
    message_text = (
        f"**–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ (ID: {partner_chat_id})**\n"
        f"üë§ –ò–º—è: {partner_row.get('name', '‚Äî')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {partner_row.get('phone', '‚Äî')}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {partner_row.get('company_name', '‚Äî')}\n"
        f"üìÖ –î–∞—Ç–∞: {partner_row.get('created_at', '')[:10]}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"partner_approve_{partner_chat_id}"),
            InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"partner_reject_{partner_chat_id}")
        ]
    ])

    for admin_id in _get_admin_ids():
        try:
            await bot.send_message(chat_id=admin_id, text=message_text, reply_markup=keyboard)
        except Exception:
            pass


async def watch_new_partner_applications(poll_interval_sec: int = 30) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤—ã—Ö Pending-–∑–∞—è–≤–∫–∞—Ö."""
    global _notified_pending_partner_ids
    while True:
        try:
            partners_df = db_manager.get_all_partners()
            if not partners_df.empty:
                pending_partners = partners_df[partners_df['status'].str.lower() == 'pending']
                for _, partner in pending_partners.iterrows():
                    pid = str(partner['chat_id'])
                    if pid not in _notified_pending_partner_ids:
                        await _notify_admins_about_partner(partner)
                        _notified_pending_partner_ids.add(pid)
        except Exception:
            # –¢–∏—Ö–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–æ—Ç–∞
            pass
        await asyncio.sleep(poll_interval_sec)


async def _notify_admins_about_service(service_row) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    service_id = service_row['id']
    message_text = (
        f"**üÜï –ù–æ–≤–∞—è –£—Å–ª—É–≥–∞ –Ω–∞ –ú–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID: {service_id})**\n"
        f"ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä ID: {service_row.get('partner_chat_id', '‚Äî')}\n"
        f"üíé –ù–∞–∑–≤–∞–Ω–∏–µ: {service_row.get('title', '‚Äî')}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service_row.get('price_points', 0)} –±–∞–ª–ª–æ–≤\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {service_row.get('description', '‚Äî')[:50]}..."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"service_approve_{service_id}"),
            InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"service_reject_{service_id}")
        ]
    ])

    for admin_id in _get_admin_ids():
        try:
            await bot.send_message(chat_id=admin_id, text=message_text, reply_markup=keyboard)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–µ {service_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def watch_new_service_submissions(poll_interval_sec: int = 30) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥–∞—Ö –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    global _notified_pending_service_ids
    while True:
        try:
            services_df = db_manager.get_pending_services_for_admin()
            if not services_df.empty:
                for _, service in services_df.iterrows():
                    sid = int(service['id'])
                    if sid not in _notified_pending_service_ids:
                        await _notify_admins_about_service(service)
                        _notified_pending_service_ids.add(sid)
                        logger.info(f"–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ {sid} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã—Ö")
        except Exception as e:
            # –¢–∏—Ö–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
            logger.debug(f"–û—à–∏–±–∫–∞ –≤ watch_new_service_submissions: {e}")
        await asyncio.sleep(poll_interval_sec)


@dp.callback_query(F.data == "admin_services")
async def show_pending_services(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (Pending)."""
    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ SupabaseManager
    services_df = db_manager.get_pending_services_for_admin()
    
    if services_df.empty:
        await callback_query.message.edit_text("‚úÖ –ù–æ–≤—ã—Ö —É—Å–ª—É–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
    for index, service in services_df.iterrows():
        service_id = service['id']
        message_text = (
            f"**–ù–æ–≤–∞—è –£—Å–ª—É–≥–∞ –Ω–∞ –ú–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID: {service_id})**\n"
            f"ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä ID: {service['partner_chat_id']}\n"
            f"üíé –ù–∞–∑–≤–∞–Ω–∏–µ: {service['title']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å (–±–æ–Ω—É—Å—ã): {service['price_points']} –±–∞–ª–ª–æ–≤\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {service['description'][:50]}..."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üü¢ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"service_approve_{service_id}"),
                InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"service_reject_{service_id}")
            ]
        ])
        
        await bot.send_message(
            chat_id=callback_query.message.chat.id, 
            text=message_text, 
            reply_markup=keyboard
        )

    await callback_query.message.edit_text(
        f"‚è≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(services_df)} —É—Å–ª—É–≥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
    )


@dp.callback_query(F.data.startswith("service_"))
async def handle_service_approval(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏."""
    parts = callback_query.data.split('_')
    action = parts[1]
    service_id = int(parts[2])
    
    new_status = 'Approved' if action == 'approve' else 'Rejected'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑ SupabaseManager
    success = db_manager.update_service_approval_status(service_id, new_status)
    
    if success:
        result_text = "üü¢ –û–¥–æ–±—Ä–µ–Ω–∞" if new_status == 'Approved' else "üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback_query.message.text:
             processed_text = callback_query.message.text.split('\n')[0]
             await callback_query.message.edit_text(f"{processed_text}\n\n**–°–¢–ê–¢–£–°: {result_text}**")
        else:
            await callback_query.message.edit_text(f"–£—Å–ª—É–≥–∞ ID {service_id}: {result_text}")
            
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏ –≤ –ë–î.")
        
    await callback_query.answer()


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–æ–≤–æ—Å—Ç—è–º–∏ ---

@dp.callback_query(F.data == "admin_news")
async def show_news_management(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="news_create")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="news_list")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="news_edit")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="news_delete")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        "üì∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–æ–≤–æ—Å—Ç—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –ó–∞—è–≤–∫–∏ –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤", callback_data="admin_partners")],
        [InlineKeyboardButton(text="‚ú® –ú–æ–¥–µ—Ä–∞—Ü–∏—è –£—Å–ª—É–≥", callback_data="admin_services")],
        [InlineKeyboardButton(text="üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–æ–≤–æ—Å—Ç—è–º–∏", callback_data="admin_news")],
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await callback_query.message.edit_text(
        "üëã **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "news_create")
async def start_news_creation(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
    await callback_query.answer()
    await state.set_state(NewsCreation.waiting_for_title)
    await callback_query.message.answer(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏**\n\n"
        "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message(NewsCreation.waiting_for_title)
async def process_news_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏."""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    await state.update_data(title=message.text)
    await state.set_state(NewsCreation.waiting_for_content)
    await message.answer(
        f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: **{message.text}**\n\n"
        "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message(NewsCreation.waiting_for_content)
async def process_news_content(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    await state.update_data(content=message.text)
    await state.set_state(NewsCreation.waiting_for_preview)
    
    preview = message.text[:200] + "..." if len(message.text) > 200 else message.text
    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        f"–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–µ–≤—å—é) –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤—å—é: _{preview}_\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤—å—é, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message(NewsCreation.waiting_for_preview)
async def process_news_preview(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –Ω–æ–≤–æ—Å—Ç–∏."""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    if message.text != '/skip':
        await state.update_data(preview_text=message.text)
    
    await state.set_state(NewsCreation.waiting_for_image)
    await message.answer(
        "‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        "–®–∞–≥ 4/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message(NewsCreation.waiting_for_image)
async def process_news_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–µ."""
    if message.text == '/cancel':
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    data = await state.get_data()
    
    if message.text != '/skip':
        data['image_url'] = message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–≤—Ç–æ—Ä–∞
    data['author_chat_id'] = str(message.chat.id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –ë–î
    success, news_id = db_manager.create_news(data)
    
    if success:
        await message.answer(
            f"‚úÖ **–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"üÜî ID –Ω–æ–≤–æ—Å—Ç–∏: {news_id}\n"
            f"üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title']}\n\n"
            f"–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ –≤–∏–¥–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    
    await state.clear()


@dp.callback_query(F.data == "news_list")
async def show_news_list(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    news_df = db_manager.get_all_news(published_only=False)
    
    if news_df.empty:
        await callback_query.message.edit_text(
            "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_news")]
            ])
        )
        return
    
    message_text = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:**\n\n"
    
    for index, news in news_df.iterrows():
        status_icon = "‚úÖ" if news['is_published'] else "üìù"
        views = news.get('views_count', 0)
        created = news['created_at'][:10] if 'created_at' in news else 'N/A'
        
        message_text += (
            f"{status_icon} **ID {news['id']}**: {news['title']}\n"
            f"   üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views} | üìÖ {created}\n\n"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_news")]
    ])
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard)


@dp.callback_query(F.data == "news_edit")
async def start_news_editing(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
    await callback_query.answer()
    
    news_df = db_manager.get_all_news(published_only=False)
    
    if news_df.empty:
        await callback_query.message.answer(
            "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç."
        )
        return
    
    message_text = "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏**\n\n–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    
    for index, news in news_df.iterrows():
        message_text += f"**{news['id']}**: {news['title']}\n"
    
    await state.set_state(NewsEditing.selecting_news)
    await callback_query.message.answer(message_text)


@dp.message(NewsEditing.selecting_news)
async def select_news_for_editing(message: types.Message, state: FSMContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        news_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    news = db_manager.get_news_by_id(news_id)
    
    if not news:
        await message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(news_id=news_id, news=news)
    await state.set_state(NewsEditing.selecting_field)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data="edit_title")],
        [InlineKeyboardButton(text="üìÑ –¢–µ–∫—Å—Ç", callback_data="edit_content")],
        [InlineKeyboardButton(text="üìã –ü—Ä–µ–≤—å—é", callback_data="edit_preview")],
        [InlineKeyboardButton(text="üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],
        [InlineKeyboardButton(text="üëÅ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", callback_data="edit_published")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])
    
    status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞" if news['is_published'] else "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫"
    
    await message.answer(
        f"üì∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ID {news_id}**\n\n"
        f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {news['title']}\n"
        f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
        f"**–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:** {news.get('views_count', 0)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("edit_"), NewsEditing.selecting_field)
async def process_field_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    field = callback_query.data.replace("edit_", "")
    
    if field == "published":
        data = await state.get_data()
        news_id = data['news_id']
        current_status = data['news']['is_published']
        new_status = not current_status
        
        success = db_manager.update_news(news_id, {'is_published': new_status})
        
        if success:
            status_text = "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞" if new_status else "—Å–Ω—è—Ç–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
            await callback_query.answer(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {status_text}")
            await callback_query.message.edit_text(
                f"‚úÖ –ù–æ–≤–æ—Å—Ç—å ID {news_id} —É—Å–ø–µ—à–Ω–æ {status_text}!"
            )
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        await state.clear()
        return
    
    await state.update_data(editing_field=field)
    await state.set_state(NewsEditing.waiting_for_new_value)
    
    field_names = {
        'title': '–∑–∞–≥–æ–ª–æ–≤–æ–∫',
        'content': '—Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏',
        'preview': '–ø—Ä–µ–≤—å—é',
        'image': 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    }
    
    await callback_query.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è **{field_names.get(field, field)}**:"
    )


@dp.message(NewsEditing.waiting_for_new_value)
async def save_edited_field(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ."""
    data = await state.get_data()
    news_id = data['news_id']
    field = data['editing_field']
    new_value = message.text
    
    field_mapping = {
        'title': 'title',
        'content': 'content',
        'preview': 'preview_text',
        'image': 'image_url'
    }
    
    db_field = field_mapping.get(field)
    success = db_manager.update_news(news_id, {db_field: new_value})
    
    if success:
        await message.answer(
            f"‚úÖ –ù–æ–≤–æ—Å—Ç—å ID {news_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"–ü–æ–ª–µ '{field}' –∏–∑–º–µ–Ω–µ–Ω–æ."
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    await state.clear()


@dp.callback_query(F.data == "cancel_edit")
async def cancel_editing(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    await state.clear()
    await callback_query.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.callback_query(F.data == "news_delete")
async def start_news_deletion(callback_query: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
    await callback_query.answer()
    
    news_df = db_manager.get_all_news(published_only=False)
    
    if news_df.empty:
        await callback_query.message.answer("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    buttons = []
    for index, news in news_df.iterrows():
        buttons.append([
            InlineKeyboardButton(
                text=f"üóë {news['id']}: {news['title'][:40]}...",
                callback_data=f"delete_news_{news['id']}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_news")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(
        "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("delete_news_"))
async def confirm_news_deletion(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
    news_id = int(callback_query.data.replace("delete_news_", ""))
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{news_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_news")
        ]
    ])
    
    await callback_query.message.edit_text(
        f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å ID {news_id}?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("confirm_delete_"))
async def delete_news_confirmed(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    news_id = int(callback_query.data.replace("confirm_delete_", ""))
    
    success = db_manager.delete_news(news_id)
    
    if success:
        await callback_query.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞")
        await callback_query.message.edit_text(
            f"‚úÖ –ù–æ–≤–æ—Å—Ç—å ID {news_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        )
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ ID {news_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
        )


# --- –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –≤–æ—á–µ—Ä—ã
    asyncio.create_task(watch_new_partner_applications())
    asyncio.create_task(watch_new_service_submissions())
    logger.info("=== –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Å –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö) ===")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ADMIN_BOT_TOKEN –∏ ADMIN_CHAT_ID
        asyncio.run(main())
    except RuntimeError as e:
        logger.critical(f"RuntimeError: {e}")
        print(e)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt)")
        print("Bot stopped by user.")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω-–±–æ—Ç–∞: {e}")
        raise
