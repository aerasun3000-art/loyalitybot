"""
AI Helper –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ –±–∞–∑–µ GigaChat
"""
import os
import logging
from typing import Optional
from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GIGACHAT_API_KEY = os.getenv('GIGACHAT_API_KEY', '')

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
SYSTEM_PROMPT = """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ:
- –ö–∞–∫ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –±–∞–ª–ª—ã
- –ö–∞–∫ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –±–∞–ª–ª—ã –Ω–∞ —É—Å–ª—É–≥–∏
- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
- –ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
- –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
1. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
2. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ üòä
4. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
5. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –ø–æ–∫—É–ø–∫–∏ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
- –ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Å–∫–∏–¥–∫–∏ –∏ —É—Å–ª—É–≥–∏
- –ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ Telegram
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–∞–ø–∏—à–∏ "–ø–æ–¥–¥–µ—Ä–∂–∫–∞" –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
"""


class AIAssistant:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
    
    def __init__(self, api_key: str = GIGACHAT_API_KEY):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á GigaChat
        """
        self.api_key = api_key
        self.enabled = bool(api_key)
        
        if not self.enabled:
            logger.warning("GigaChat API key not found. AI assistant disabled.")
    
    async def get_answer(self, question: str, context: Optional[str] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç–≤–µ—Ç AI –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled:
            logger.warning("AI assistant is disabled")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
            messages = [
                Messages(
                    role=MessagesRole.SYSTEM,
                    content=SYSTEM_PROMPT
                ),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if context:
                messages.append(
                    Messages(
                        role=MessagesRole.SYSTEM,
                        content=f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {context}"
                    )
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append(
                Messages(
                    role=MessagesRole.USER,
                    content=question
                )
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            with GigaChat(
                credentials=self.api_key,
                verify_ssl_certs=False,
                scope="GIGACHAT_API_PERS"  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
            ) as giga:
                response = giga.chat(Chat(messages=messages))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                answer = response.choices[0].message.content
                
                logger.info(f"AI response generated for question: {question[:50]}...")
                return answer
                
        except Exception as e:
            logger.error(f"Error getting AI response: {e}")
            return None
    
    async def get_service_recommendation(
        self, 
        user_balance: int, 
        user_history: list = None
    ) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —É—Å–ª—É–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
        
        Args:
            user_balance: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_history: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            
        Returns:
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–ª–∏ None
        """
        if not self.enabled:
            return None
        
        context = f"""
        –ë–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_balance} –±–∞–ª–ª–æ–≤
        
        –î–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å 
        —Å —Ç–∞–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º!
        """
        
        try:
            return await self.get_answer(
                "–ß—Ç–æ —è –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å –º–æ–∏–º–∏ –±–∞–ª–ª–∞–º–∏?", 
                context=context
            )
        except Exception as e:
            logger.error(f"Error getting recommendation: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
ai_assistant = AIAssistant()


async def get_ai_support_answer(question: str) -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
    
    Args:
        question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –û—Ç–≤–µ—Ç AI –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    answer = await ai_assistant.get_answer(question)
    
    if answer:
        return answer
    else:
        return (
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. üòî\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥–¥–µ—Ä–∂–∫–∞' "
            "–¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
        )

