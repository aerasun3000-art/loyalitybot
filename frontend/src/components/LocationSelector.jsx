import { useState, useEffect } from 'react'
import { getCities, getDistrictsByCity } from '../services/supabase'
import { hapticFeedback } from '../utils/telegram'

const LocationSelector = ({ isOpen, onClose, onSelect, title = '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' }) => {
  const [cities, setCities] = useState([])
  const [districts, setDistricts] = useState([])
  const [selectedCity, setSelectedCity] = useState('')
  const [selectedDistrict, setSelectedDistrict] = useState('')
  const [loading, setLoading] = useState(false)
  const [step, setStep] = useState('city') // 'city' –∏–ª–∏ 'district'

  useEffect(() => {
    if (isOpen) {
      loadCities()
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ localStorage
      const savedCity = localStorage.getItem('selectedCity')
      const savedDistrict = localStorage.getItem('selectedDistrict')
      if (savedCity) setSelectedCity(savedCity)
      if (savedDistrict) setSelectedDistrict(savedDistrict)
    }
  }, [isOpen])

  const loadCities = async () => {
    setLoading(true)
    try {
      const citiesData = await getCities()
      setCities(citiesData)
    } catch (error) {
      console.error('Error loading cities:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleCitySelect = async (city) => {
    hapticFeedback('light')
    setSelectedCity(city)
    setLoading(true)
    
    try {
      const districtsData = await getDistrictsByCity(city)
      setDistricts(districtsData)
      
      if (districtsData.length > 0) {
        setStep('district')
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–π–æ–Ω–æ–≤, —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–æ–¥—É
        handleConfirm(city, '')
      }
    } catch (error) {
      console.error('Error loading districts:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleDistrictSelect = (district) => {
    hapticFeedback('light')
    setSelectedDistrict(district)
  }

  const handleConfirm = (city = selectedCity, district = selectedDistrict) => {
    hapticFeedback('medium')
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
    if (city) localStorage.setItem('selectedCity', city)
    if (district) localStorage.setItem('selectedDistrict', district)
    
    onSelect({ city, district })
    handleClose()
  }

  const handleBack = () => {
    hapticFeedback('light')
    if (step === 'district') {
      setStep('city')
      setSelectedDistrict('')
      setDistricts([])
    }
  }

  const handleClearFilters = () => {
    hapticFeedback('medium')
    setSelectedCity('')
    setSelectedDistrict('')
    localStorage.removeItem('selectedCity')
    localStorage.removeItem('selectedDistrict')
    onSelect({ city: null, district: null })
    handleClose()
  }

  const handleClose = () => {
    setStep('city')
    onClose()
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-end justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-white rounded-t-3xl w-full max-h-[80vh] flex flex-col animate-slide-up">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="px-4 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            {step === 'district' && (
              <button
                onClick={handleBack}
                className="p-2 -ml-2 text-gray-600"
              >
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M19 12H5M12 19l-7-7 7-7" />
                </svg>
              </button>
            )}
            <h2 className="text-xl font-bold text-gray-800 flex-1 text-center">
              {step === 'city' ? '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω'}
            </h2>
            <button
              onClick={handleClose}
              className="p-2 -mr-2 text-gray-600"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M18 6L6 18M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ */}
          {step === 'district' && selectedCity && (
            <div className="mt-2 text-sm text-gray-600 text-center">
              üìç {selectedCity}
            </div>
          )}
        </div>

        {/* –°–ø–∏—Å–æ–∫ */}
        <div className="flex-1 overflow-y-auto px-4 py-2">
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <div className="w-8 h-8 border-4 border-pink-500 border-t-transparent rounded-full animate-spin"></div>
            </div>
          ) : (
            <>
              {step === 'city' && (
                <div className="space-y-2">
                  {/* –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –≥–æ—Ä–æ–¥–∞" */}
                  <button
                    onClick={() => handleConfirm('', '')}
                    className="w-full p-4 bg-gradient-to-r from-pink-500 to-purple-500 text-white rounded-2xl font-semibold active:scale-95 transition-transform duration-200"
                  >
                    üåç –í—Å–µ –≥–æ—Ä–æ–¥–∞
                  </button>
                  
                  {cities.filter(city => city !== '–í—Å–µ').map((city, index) => (
                    <button
                      key={index}
                      onClick={() => handleCitySelect(city)}
                      className={`w-full p-4 rounded-2xl font-semibold text-left transition-all duration-200 active:scale-95 ${
                        selectedCity === city
                          ? 'bg-pink-500 text-white'
                          : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                      }`}
                    >
                      üìç {city}
                    </button>
                  ))}
                  
                  {cities.length === 0 && (
                    <div className="text-center text-gray-500 py-8">
                      <div className="text-4xl mb-2">üèôÔ∏è</div>
                      <p>–ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    </div>
                  )}
                </div>
              )}

              {step === 'district' && (
                <div className="space-y-2">
                  {/* –ö–Ω–æ–ø–∫–∞ "–í—Å–µ —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞" */}
                  <button
                    onClick={() => handleConfirm(selectedCity, '')}
                    className="w-full p-4 bg-gradient-to-r from-pink-500 to-purple-500 text-white rounded-2xl font-semibold active:scale-95 transition-transform duration-200"
                  >
                    üåÜ –í—Å–µ —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞
                  </button>
                  
                  {districts.filter(district => district !== '–í—Å–µ').map((district, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        handleDistrictSelect(district)
                        handleConfirm(selectedCity, district)
                      }}
                      className={`w-full p-4 rounded-2xl font-semibold text-left transition-all duration-200 active:scale-95 ${
                        selectedDistrict === district
                          ? 'bg-pink-500 text-white'
                          : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                      }`}
                    >
                      üìå {district}
                    </button>
                  ))}
                  
                  {districts.length === 0 && (
                    <div className="text-center text-gray-500 py-8">
                      <div className="text-4xl mb-2">üèòÔ∏è</div>
                      <p>–†–∞–π–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                      <button
                        onClick={() => handleConfirm(selectedCity, '')}
                        className="mt-4 px-6 py-2 bg-pink-500 text-white rounded-full font-semibold"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–∞–π–æ–Ω–∞
                      </button>
                    </div>
                  )}
                </div>
              )}
            </>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        {(selectedCity || selectedDistrict) && step === 'city' && (
          <div className="px-4 py-3 border-t border-gray-200">
            <button
              onClick={handleClearFilters}
              className="w-full py-3 text-gray-600 font-semibold rounded-2xl border-2 border-gray-300 active:scale-95 transition-transform duration-200"
            >
              üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        )}
      </div>

      {/* –°—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ */}
      <style>{`
        @keyframes slide-up {
          from {
            transform: translateY(100%);
          }
          to {
            transform: translateY(0);
          }
        }
        .animate-slide-up {
          animation: slide-up 0.3s ease-out;
        }
      `}</style>
    </div>
  )
}

export default LocationSelector

